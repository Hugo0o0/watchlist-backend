// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movieIds  String[] @db.ObjectId
  seriesIds String[] @db.ObjectId
  movies    Movie[]  @relation(fields: [movieIds], references: [id])
  series    Series[] @relation(fields: [seriesIds], references: [id])
  ratings   Rating[]
}

model Movie {
  id                  String              @id @default(auto()) @map("_id") @db.ObjectId
  budget              Int
  homepage            String
  imdbId              String
  title               String
  overview            String
  releaseDate         DateTime
  revenue             Int
  status              String
  runtime             Int
  averageRating       Float
  poster              Json
  genreIds            String[]            @db.ObjectId
  userIds             String[]            @db.ObjectId
  countryIds          String[]            @db.ObjectId
  companyIds          String[]            @db.ObjectId
  genres              Genre[]             @relation(fields: [genreIds], references: [id])
  users               User[]              @relation(fields: [userIds], references: [id])
  productionCountries ProductionCountry[] @relation(fields: [countryIds], references: [id])
  productionCompanies ProductionCompany[] @relation(fields: [companyIds], references: [id])
  ratings             Rating[]
}

model Series {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  firstAirDate     DateTime
  lastAirDate      DateTime
  numberOfSeasons  Int
  numberOfEpisodes Int
  overview         String
  status           String
  poster           Json
  averageRating    Float
  genreIds         String[]  @db.ObjectId
  creatorIds       String[]  @db.ObjectId
  userIds          String[]  @db.ObjectId
  genres           Genre[]   @relation(fields: [genreIds], references: [id])
  creators         Creator[] @relation(fields: [creatorIds], references: [id])
  users            User[]    @relation(fields: [userIds], references: [id])
  ratings          Rating[]
  seasons          Season[]
}

model Genre {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  movieIds  String[] @db.ObjectId
  seriesIds String[] @db.ObjectId
  movies    Movie[]  @relation(fields: [movieIds], references: [id])
  series    Series[] @relation(fields: [seriesIds], references: [id])
}

model ProductionCompany {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String   @unique
  originCountry String?
  movieIds      String[] @db.ObjectId
  movies        Movie[]  @relation(fields: [movieIds], references: [id])
}

model ProductionCountry {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @unique
  iso_3166 String   @unique
  movieIds String[] @db.ObjectId
  movies   Movie[]  @relation(fields: [movieIds], references: [id])
}

model Creator {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  seriesIds String[] @db.ObjectId
  series    Series[] @relation(fields: [seriesIds], references: [id])
}

model Rating {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  rating   Int
  seriesId String? @db.ObjectId
  movieId  String? @db.ObjectId
  userId   String  @db.ObjectId
  series   Series? @relation(fields: [seriesId], references: [id])
  movie    Movie?  @relation(fields: [movieId], references: [id])
  user     User    @relation(fields: [userId], references: [id])
}

model Season {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  seasonNumber Int
  overview     String?
  airDate      DateTime
  episodeCount Int
  seriesId     String   @db.ObjectId
  series       Series   @relation(fields: [seriesId], references: [id], onDelete: Cascade)
}
